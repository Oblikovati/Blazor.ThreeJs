@using SpawnDev.BlazorJS
@using SpawnDev.BlazorJS.JSObjects
@inject THREE THREE
@inject BlazorJSRuntime JS

@page "/creating-text"

<PageTitle>Creating Text Example</PageTitle>

<canvas @ref=_canvasContainer width="500" height="500" style="margin-left:300px;"></canvas>

@code {
    private ElementReference _canvasContainer;
    private WebGLRenderer.WebGLRenderer? _renderer;
    private Scene.Scene? _scene;
    private Camera.Camera? _camera;
    private Mesh.Mesh? _cube;

    protected override void OnAfterRender(bool firstRender)
    {

        if (firstRender)
        {
            var window = JS.GetWindow();
            var document = JS.GetDocument();

            var canvas = new HTMLCanvasElement(_canvasContainer);

            if (window is null || document is null) return;

            _scene = THREE.Scene();

            _camera = THREE.PerspectiveCamera(75, canvas.ClientWidth / canvas.ClientHeight, 0.1, 1000);

            _renderer = THREE.WebGLRenderer(new WebGLRenderer.WebGLRendererParameters
            {
                Canvas = new Element(_canvasContainer),
            });

            _renderer.SetClearColor(0x333333);
            _renderer.SetSize(canvas.ClientWidth, canvas.ClientHeight);
            _renderer.SetAnimationLoop(Animate);

            document.Body?.AppendChild(_renderer.DomElement);

            var geometry = THREE.BoxGeometry(1, 1, 1);
            var material = THREE.MeshBasicMaterial(new Material.MeshBasicMaterialParameters { Color = 0x00ff00 });
            _cube = THREE.Mesh(geometry, material);
            _scene.Add(_cube);

            _camera.Position.Z = 3;
        }
    }

    private void Animate()
    {
        if (_scene is null || _camera is null || _cube is null) return;

        _cube.Rotation.X += 0.01f;
        _cube.Rotation.Y += 0.01f;
        _renderer?.Render(_scene, _camera);
    }
}
