@using Blazor.ThreeJs.Math
@using Blazor.ThreeJs.Renderer.WebGLRenderer
@using SpawnDev.BlazorJS
@using SpawnDev.BlazorJS.JSObjects
@inject THREE THREE
@inject BlazorJSRuntime JS

@page "/drawing-lines"

<PageTitle>Drawing Lines Example</PageTitle>

<canvas @ref=_canvasContainer width="500" height="500" style="margin-left:300px;"></canvas>

@code {
    private ElementReference _canvasContainer;
    private WebGLRenderer? _renderer;
    private Scene.Scene? _scene;
    private Camera.Camera? _camera;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            var window = JS.GetWindow();
            var document = JS.GetDocument();

            var canvas = new HTMLCanvasElement(_canvasContainer);

            if (window is null || document is null) return;

            _scene = THREE.Scene();

            _camera = THREE.PerspectiveCamera(75, canvas.ClientWidth / canvas.ClientHeight, 0.1, 1000);

            _renderer = THREE.WebGLRenderer(new WebGLRendererParameters
            {
                Canvas = new Element(_canvasContainer),
            });

            _renderer.SetClearColor(0x333333);
            _renderer.SetSize(canvas.ClientWidth, canvas.ClientHeight);

            document.Body?.AppendChild(_renderer.DomElement);

            _camera.Position.Z = 100;
            _camera.LookAt(0, 0, 0);

            var material = THREE.LineBasicMaterial(  new Material.LineBasicMaterialParameters  { Color= 0x0000ff } );

            var points = new Array<Vector3>();

            points.Push(THREE.Vector3(-10, 0, 0));
            points.Push(THREE.Vector3(0, 10, 0));
            points.Push(THREE.Vector3(10, 0, 0));

            var geometry = THREE.BufferGeometry().SetFromPoints(points);

            var line = THREE.Line(geometry, material);

            _scene.Add(line);

            _renderer.Render(_scene, _camera);
        }
    }
}
